start on stopped module-init-tools and stopped udevtrigger
stop on runlevel [06]

nice -10

pre-start script
set +e
load_modules ()
{
	MODULES_MISSING=false

	echo "Loading LIRC modules"
	for mod in $*; do
		if [ $mod = "udev" ]; then
			echo "Restarted via udev, don't reload modules"
			break
		else
			modprobe $mod 2> /dev/null || MODULES_MISSING=true
		fi
	done

	if $MODULES_MISSING; then
		echo "Unable to load LIRC kernel modules. Verify your"
		echo "selected kernel modules in /etc/lirc/hardware.conf"
		START_LIRCMD=false
		START_LIRCD=false
	fi
}

build_args ()
{
	ARGS="$*"

	## Try to find an lirc device.
	if [ -z "$DEVICE" ]; then
		if [ -c $dev ]; then
			DEVICE="$dev"
			break
		fi
	fi

	if [ -n "$DEVICE" ] && [ "$DEVICE" != "none" ]; then
		ARGS="--device=$DEVICE $ARGS"
	fi

	if [ -n "$DRIVER" ] && [ "$DRIVER" != "none" ]; then
		ARGS="--driver=$DRIVER $ARGS"
	fi

	echo $ARGS
}

# Normally autofs mounts shares early
# in the boot process, Whenever a
# file is requested. However, this
# automatic behavior doesn't work
# on FreeBSD NFS. Programs like Lirc
# will therefor fail when relying
# on configuration files stored (and
# symlinked) to a FreeBSD NFS shares.
#
# This loop will check if the configuarion
# file consists of a symlink and then
# checks if the symlink can be resolved.
# In normal operation, this shouldn't
# cause troubles and all loops can be
# exited immediatly. When using a
# FreeBSD NFS share, these loops will
# make sure Lirc won't start before all
# configuartion files can be resolved.
# All with a timeout of 30 seconds in
# case of a network failure.

ERROR=0;
if [ -L /etc/lirc/lircd.conf ]; then
        L=$(readlink /etc/lirc/lircd.conf);
        X=0;
        while ! [ -f $L ]; do
        	if [ $X -gt 30 ]; then
        		ERROR=1;
        		break;
        	fi
        	X=$(($X+1));
                sleep 1;
        done
fi
 
if [ -L /etc/lirc/lircmd.conf ] && [ $ERROR -eq 0 ]; then
        L=$(readlink /etc/lirc/lircmd.conf);
        X=0;
        while ! [ -f $L ]; do
        	if [ $X -gt 30 ]; then
        		ERROR=1;
        		break;
        	fi
        	X=$(($X+1));
                sleep 1;
        done
fi
 
if [ -L /etc/lirc/lircrc ] && [ $ERROR -eq 0 ]; then
        L=$(readlink /etc/lirc/lircrc);
        X=0;
        while ! [ -f $L ]; do
        	if [ $X -gt 30 ]; then
        		ERROR=1;
        		break;
        	fi
        	X=$(($X+1));
                sleep 1;
        done
fi

[ -e /etc/lirc/lircd.conf ] && export START_LIRCD=true
[ -e /etc/lirc/lircmd.conf ] && export START_LIRCMD=true
[ -e /etc/lirc/lircrc ] && export START_IREXEC=true

if grep -q "^#UNCONFIGURED" /etc/lirc/lircd.conf; then
	echo "No valid /etc/lirc/lircd.conf has been found."
	echo "Remote control support has been disabled."
	echo "Reconfigure LIRC or manually replace /etc/lirc/lircd.conf to enable."
	stop; exit 1
fi

if grep -q "^#UNCONFIGURED" /etc/lirc/lircmd.conf; then
	export START_LIRCMD=false
fi

if grep -q "^#UNCONFIGURED" /etc/lirc/lircrc; then
	export START_IREXEC=false
fi

if [ -f /etc/lirc/hardware.conf ];then
	. /etc/lirc/hardware.conf
fi

		[ -d "/var/run/lirc" ] || mkdir -p "/var/run/lirc"
		if [ "$LOAD_MODULES" = "true" ] && [ "$START_LIRCD" = "true" ]; then
			load_modules $MODULES
		fi

		# retain compatibility with old clients
		ln -fs ../var/run/lirc/lircd /dev/lircd

		if [ "$START_LIRCD" = "true" ]; then
			echo "Starting remote control daemon(s) : LIRC "
			LIRCD_ARGS=`build_args $LIRCD_ARGS`

			if [ ! -z "$LIRCD_ARGS" ]; then
				set -- $LIRCD_ARGS
				/usr/local/sbin/lircd $@
			fi
		fi

		if [ "$START_LIRCMD" = "true" ]; then
			echo "Starting remote control mouse daemon : LIRCMD "
			/usr/local/sbin/lircmd
		fi

		if [ "$START_IREXEC" = "true" ]; then
			echo "Starting execution daemon: irexec"
			/usr/local/bin/irexec -d /etc/lirc/lircrc
		fi
    exit 0
end script

post-stop script
    set +e
    for p in lircrc lircmd lircd; do pkill $p; done
    exit 0
end script
